#!/usr/bin/env python

try:
	import urllib2
except ImportError:
	import urllib.request as urllib2

import time
import sys
import os
import json
import re



class Moon(object):
	crescent = "FA_MOON_O"

	rise = "WEATHER_MOONRISE"
	set = "WEATHER_MOONSET"

	new="WEATHER_MOON_NEW"
	full="WEATHER_MOON_FULL"
	quarter="WEATHER_MOON_FIRST_QUARTER"
	third="WEATHER_MOOON_THIRD_QUARTER"

	def current(self):
		return self.new





class Icon(object):
	moon = Moon()
	unknown="WEATHER_ALIEN" #it's a bug!

	@classmethod
	def map(cls,status):
		status=status.lower().split('/')[-1] #strip paths, leaving final filename

		#get filename without extension
		icon = status.split('.')[0]

		if icon == 'dualimage':
			#filename is after the extension, and part of the GET params
			#dualimage.php?i=FN1&j=FN2
			# see http://forecast.weather.gov/DualImage.php?i=ntsra&j=nfzra&ip=30&jp=60
			icon = status.split('&')[0].split('=')[1]

		icon = re.sub(r'\d+','',icon) #remove percentage chances, e.g. hi_tsra60

		if icon in _icon_mapping:
			return _icon_mapping[icon]
		elif icon[0] == "n" and icon[1:] in _icon_mapping: #got night version, no night icon to use
			return _icon_mapping[icon[1:]]
		elif re.sub('_n','_',icon) in _icon_mapping: #sometimes the night flag is after an underscore
			return _icon_mapping[re.sub('_n','_',icon)]
		else:
			return cls.unknown
			
				
""" see http://www.weather.gov/forecast-icons for list and explanation """
_icon_mapping = {
	'skc': "FA_SUN_O", #Fair
	 'nskc': Icon.moon.current(), #Night, Fair
	'few': "WEATHER_DAY_SUNNY_OVERCAST", #few clouds
	 'nfew': "WEATHER_NIGHT_ALT_PARTLY_CLOUDY", #Night, few clouds
	'sct': "WEATHER_DAY_CLOUDY", #partly cloudy/scattered
	 'nsct': "WEATHER_NIGHT_ALT_CLOUDY", #Night, partly/scattered
	'bkn': "WEATHER_CLOUD", #mostly cloudy/broken
	'ovc': "WEATHER_CLOUDY", #Overcast

	'sn': "WEATHER_DAY_SNOW", #Snow
	 'nsn': "WEATHER_NIGHT_ALT_SNOW",
	'ra_sn': "WEATHER_RAIN_MIX", #Rain Snow
	'raip': "WEATHER_RAIN_MIX", #Ran Ice Pellets
	'fzra': "WEATHER_RAIN_MIX", #Freezing rain
	'ra_fzra': "WEATHER_RAIN_MIX", #Freezing Rain + Rain
	'fzra_sn': "WEATHER_RAIN_MIX", #Freezing rain + Snow
	'ip': "WEATHER_RAIN_MIX", #Ice pellets
	'snip': "WEATHER_RAIN_MIX", #Snow + Ice Pellets

	'minus_ra': "WEATHER_RAINDROPS", #Light rain
	'ra': "WEATHER_RAINDROP", #Rain
	'shra': "WEATHER_DAY_RAIN", #Rain showers (cloudy)
	 'nshra': "WEATHER_NIGHT_ALT_RAIN",
	'hi_shwrs': "WEATHER_DAY_RAIN", #Rain showers (few clouds)
	 'hi_nshwrs': "WEATHER_NIGHT_ALT_RAIN",

	'tsra': "WEATHER_THUNDERSTORM", #Thunderstorm (cloudy)
	'scttsra': "WEATHER_DAY_THUNDERSTORM", #Thunderstorm (some clouds)
	 'nscttsra': "WEATHER_NIGHT_ALT_THUNDERSTORM",
	'hi_tsra': "WEATHER_DAY_SNOW_THUNDERSTORM", #Thunderstorm (few clouds)
	 'hi_ntsra': "WEATHER_NIGHT_ALT_SNOW_THUNDERSTORM",

	'fc': "WEATHER_TORNADO", #Funnel Cloud
	'tor': "WEATHER_TORNADO", #Tornado
	'hur_warn': "WEATHER_HURRICANE_WARNING", #Hurricane Warning
	'hur_watch': "WEATHER_STORM_WARNING", #Hurricane Watch
	'ts_warn': "WEATHER_GALE_WARNING", #Tropical Storm Warning
	'ts_watch': "WEATHER_SMALL_AIRCRAFT_ADVISORY", #Tropical Storm Watch
	'ts_nowarn': "WEATHER_HURRICANE", #Tropical Storm + Hurricane

	'wind_skc': "WEATHER_DAY_WINDY", #Windy, clear
	'wind_few': "WEATHER_DAY_LIGHT_WIND", #Windy, Few clouds
	'wind_sct': "WEATHER_DAY_CLOUDY_GUSTS", #Windy, partly cloudy
	'wind_bkn': "WEATHER_CLOUDY_GUSTS", #Windy, mostly cloudy
	'wind_ovc': "WEATHER_CLOUDY_WINDY", #Windy, overcast
	'nwind_skc': "WEATHER_STRONG_WIND", #Windy, clear
	'nwind_few': "WEATHER_STRONG_WIND", #Windy, Few clouds
	'nwind_sct': "WEATHER_NIGHT_CLOUDY_GUSTS", #Windy, partly cloudy
	'nwind_bkn': "WEATHER_NIGHT_CLOUDY_WINDY", #Windy, mostly cloudy

	'du': "WEATHER_DUST", #Dusty
	'fu': "WEATHER_SMOKE", #Smoke
	'hz': "WEATHER_DAY_HAZE", #Haze
	'hot': "WEATHER_HOT", #Hot
	'cold': "WEATHER_SNOWFLAKE_COLD", #Cold
	'blizzard': "WEATHER_SANDSTORM", #Blizzard
	'fg': "WEATHER_FOG", #Fog/Mist
	'nfg': "WEATHER_NIGHT_FOG",
	#extras from old icon system, not in above list but go to valid images
	'mix': "WEATHER_RAIN_MIX", #Wintry Mix
	'rasn': "WEATHER_RAIN_MIX", #Another form of Rain-Snow?
	'wind': "WEATHER_WINDY" #Windy

}

NOAA_URL="http://forecast.weather.gov/MapClick.php?lat=%(lat)s&lon=%(lon)s&unit=0&lg=english&FcstType=%(type)s"
# known types:
# dwml, json, xml, kml, text (with TextType 1 or 2), digital, graphical

params = {
	'lat': "42.6847",
	'lon': "-73.8682",
	'type': 'json'
}

print(os.environ['WEATHER_REFRESH'])
time.sleep(35)
while True:
	try:
		data = urllib2.urlopen(NOAA_URL % params)
		data = json.loads(data.read().decode())
		output = "{title}{link_start}{icon}{link_end}{color_reset} {temp}Â°F".format(**{
				'title': os.environ['C_TITLE'],
				'icon': os.environ[Icon.map(data['currentobservation']['Weatherimage'])],
				'color_reset': os.environ['C_RST'],
				'temp': data['currentobservation']['Temp'],
				'link_start': "%{A:"+os.path.join(os.path.dirname(os.path.realpath(__file__)),"popups/weather")+":}",
				'link_end': '%{A}'
			})

		print(output)

	except Exception as e:
		import datetime
		import traceback
		f = open("/home/dan/tmp/weather-err.txt","a")
		f.write("Exception at %s\n" % (datetime.datetime.now().strftime("%c"),) )
		traceback.print_exception(*sys.exc_info(),file=f)
		f.close()
	
	time.sleep(60*40)
