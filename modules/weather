#!/usr/bin/env python

try:
	import urllib2
except ImportError:
	import urllib.request as urllib2

import time
import sys
import os
import json
import re

def make(font, character):
	return "{}{}{}".format(os.environ[font],character,os.environ['F_RESET'])


class Sun(object):
	small = make("F_UUSHI","\u2600")
	tiny = make("F_LEMON","\u2600")
	night=make("F_SIJI","\ue233")
	def __str__(self):
		return make('F_SIJI',"\ue234")

class Precip(object):
	thunder = make("F_SIJI","\ue22c")
	hard = make("F_SIJI","\ue22f")
	snow = make("F_SIJI","\ue22e")
	alt = make("F_SIJI","\ue22d")
	umbrella=make("F_UUSHI","\u2602")
	def __str__(self):
		return make("F_SIJI","\ue230")

class Danger(object):
	water_spout=make("F_SIJI","\ue083")
	tornado=make("F_SIJI","\ue027")
	rot_watch=make("F_SIJI","\ue1c0")
	rot_warn=make("F_SIJI","\ue1c1")
	rot_doom=make("F_SIJI","\ue100")

	low_vis=make("F_UUSHI","\u2b5f")
	heat=make("F_SIJI","\ue01b")
	cold=make("F_SIJI","\ue0cf")
	blizzard="{}{}".format(make("F_SIJI","\ue0ae"),Precip.snow)

class Cloudy(object):
	partial = make("F_SIJI","\ue231")
	partial_night= make("F_SIJI","\ue232")
	small = make("F_UUSHI","\u2601")
	tiny = make("F_LEMON","\u2601")
	def __str__(self):
		return make("F_SIJI","\ue22b")

class Icon(object):
	sun = Sun()
	cloudy = Cloudy()
	windy = make("F_SIJI","\ue235")
	precip = Precip()
	danger = Danger()
	unknown=make("F_SIJI","\ue1b6") #it's a bug!

	@classmethod
	def map(cls,status):
		status=status.lower().split('/')[-1] #strip paths, leaving final filename

		#get filename without extension
		icon = status.split('.')[0]

		if icon == 'dualimage':
			#filename is after the extension, and part of the GET params
			#dualimage.php?i=FN1&j=FN2
			# see http://forecast.weather.gov/DualImage.php?i=ntsra&j=nfzra&ip=30&jp=60
			icon = status.split('&')[0].split('=')[1]

		icon = re.sub(r'\d+','',icon) #remove percentage chances, e.g. hi_tsra60

		if icon in _icon_mapping:
			return _icon_mapping[icon]
		elif icon[0] == "n" and icon[1:] in _icon_mapping: #got night version, no night icon to use
			return _icon_mapping[icon[1:]]
		elif re.sub('_n','_',icon) in _icon_mapping: #sometimes the night flag is after an underscore
			return _icon_mapping[re.sub('_n','_',icon)]
		else:
			return cls.unknown
			
				
""" see http://www.weather.gov/forecast-icons for list and explanation """
_icon_mapping = {
	'skc': str(Icon.sun), #Fair
	 'nskc': Icon.sun.night, #Night, Fair
	'few': Icon.sun.tiny, #few clouds
	 'nfew': Icon.sun.night, #Night, few clouds
	'sct': Icon.cloudy.partial, #partly cloudy/scattered
	 'nsct': Icon.cloudy.partial_night, #Night, partly/scattered
	'bkn': Icon.cloudy.partial, #mostly cloudy/broken
	 'nbkn': Icon.cloudy.partial_night, #Night, mostly cloudy/broken
	'ovc': str(Icon.cloudy), #Overcast
	'sn': Icon.precip.snow, #Snow
	'ra_sn': Icon.precip.alt, #Rain Snow
	'raip': Icon.precip.alt, #Ran Ice Pellets
	'fzra': Icon.precip.alt, #Freezing rain
	'ra_fzra': Icon.precip.alt, #Freezing Rain + Rain
	'fzra_sn': Icon.precip.alt, #Freezing rain + Snow
	'ip': Icon.precip.alt, #Ice pellets
	'snip': Icon.precip.alt, #Snow + Ice Pellets
	'minus_ra': str(Icon.precip), #Light rain
	'ra': str(Icon.precip), #Rain
	'shra': str(Icon.precip), #Rain showers (cloudy)
	'hi_shwrs': str(Icon.precip), #Rain showers (some clouds)
	'tsra': Icon.precip.thunder, #Thunderstorm (cloudy)
	'scttsra': Icon.precip.thunder, #Thunderstorm (some clouds)
	'hi_tsra': Icon.precip.thunder, #Thunderstorm (few clouds)
	'fc': Icon.danger.water_spout, #Funnel Cloud
	'tor': Icon.danger.tornado, #Tornado
	'hur_warn': Icon.danger.rot_warn, #Hurricane Warning
	'hur_watch': Icon.danger.rot_watch, #Hurricane Watch
	'ts_warn': Icon.danger.rot_warn, #Tropical Storm Warning
	'ts_watch': Icon.danger.rot_watch, #Tropical Storm Watch
	'ts_nowarn': Icon.danger.rot_doom, #Tropical Storm + Hurricane
	'wind_skc': Icon.windy, #Windy, clear
	'wind_few': Icon.windy, #Windy, Few clouds
	'wind_sct': Icon.windy, #Windy, partly cloudy
	'wind_bkn': Icon.windy, #Windy, mostly cloudy
	'wind_ovc': Icon.windy, #Windy, overcast
	'du': Icon.danger.low_vis, #Dusty
	'fu': Icon.danger.low_vis, #Smoke
	'hz': Icon.danger.low_vis, #Haze
	'hot': Icon.danger.heat, #Hot
	'cold': Icon.danger.cold, #Cold
	'blizzard': Icon.danger.blizzard, #Blizzard
	'fg': Icon.danger.low_vis, #Fog/Mist
	#extras from old icon system, not in above list but go to valid images
	'mix': Icon.precip.snow, #Wintry Mix
	'rasn': Icon.precip.alt, #Another form of Rain-Snow?
	'wind': Icon.windy #Windy

}

NOAA_URL="http://forecast.weather.gov/MapClick.php?lat=%(lat)s&lon=%(lon)s&unit=0&lg=english&FcstType=%(type)s"
# known types:
# dwml, json, xml, kml, text (with TextType 1 or 2), digital, graphical

params = {
	'lat': "42.6847",
	'lon': "-73.8682",
	'type': 'json'
}

while True:
	try:
		data = urllib2.urlopen(NOAA_URL % params)
		data = json.loads(data.read().decode())
		output = "{title}{link_start}{icon}{link_end}{color_reset} {temp}Â°F".format(**{
				'title': os.environ['C_TITLE'],
				'icon': Icon.map(data['currentobservation']['Weatherimage']),
				'color_reset': os.environ['C_RST'],
				'temp': data['currentobservation']['Temp'],
				'link_start': "%{A:"+os.path.join(os.path.dirname(os.path.realpath(__file__)),"popups/weather")+":}",
				'link_end': '%{A}'
			})

		print(output)
		sys.stdout.flush()

	except Exception as e:
		import datetime
		import traceback
		f = open("/home/dan/tmp/weather-err.txt","a")
		f.write("Exception at %s\n" % (datetime.datetime.now().strftime("%c"),) )
		traceback.print_exception(*sys.exc_info(),file=f)
		f.close()
	
	time.sleep(60*40)
