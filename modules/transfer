#!modules/dbus-venv/bin/python

import time
import sys
import os
import signal
from enum import Enum
import pydbus


ICON=os.getenv("C_TITLE","")+os.getenv("MD_IMPORT_EXPORT","^")+os.getenv("C_RST","")

class DeviceType(Enum): #_u* are unused
    UNKNOWN, ETHERNET, WIFI, _u1, _u2, BT, OLPC_MESH, WIMAX, MODEM, INFINIBAND, BOND, VLAN, ADSL, BRIDGE, GENERIC, TEAM, TUN, IP_TUN, MACVLAN, VXLAN, VETH, MACSEC, DUMMY = range(23)

class DeviceState(Enum):
    UNKNOWN, UNMANAGED, UNAVAILABLE, DISCONNECTED, PREPARE, CONFIG, NEED_AUTH, IP_CONFIG, IP_CHECK, SECONDARIES, ACTIVATED, DEACTIVATING, FAILED = range(0,130,10)

class DeviceStateReason(Enum):
    NONE,UNKNOWN,NOW_MANAGED,NOW_UNMANAGED,CONFIG_FAILED,IP_CONFIG_UNAVAILABLE,IP_CONFIG_EXPIRED,NO_SECRETS,SUPPLICANT_DISCONNECT,SUPPLICANT_CONFIG_FAILED,SUPPLICANT_FAILED,SUPPLICANT_TIMEOUT,PPP_START_FAILED,PPP_DISCONNECT,PPP_FAILED,DHCP_START_FAILED,DHCP_ERROR,DHCP_FAILED,SHARED_START_FAILED,SHARED_FAILED,AUTOIP_START_FAILED,AUTOIP_ERROR,AUTOIP_FAILED,MODEM_BUSY,MODEM_NO_DIAL_TONE,MODEM_NO_CARRIER,MODEM_DIAL_TIMEOUT,MODEM_DIAL_FAILED,MODEM_INIT_FAILED,GSM_APN_FAILED,GSM_REGISTRATION_NOT_SEARCHING,GSM_REGISTRATION_DENIED,GSM_REGISTRATION_TIMEOUT,GSM_REGISTRATION_FAILED,GSM_PIN_CHECK_FAILED,FIRMWARE_MISSING,REMOVED,SLEEPING,CONNECTION_REMOVED,USER_REQUESTED,CARRIER,CONNECTION_ASSUMED,SUPPLICANT_AVAILABLE,MODEM_NOT_FOUND,BT_FAILED,GSM_SIM_NOT_INSERTED,GSM_SIM_PIN_REQUIRED,GSM_SIM_PUK_REQUIRED,GSM_SIM_WRONG,INFINIBAND_MODE,DEPENDENCY_FAILED,BR2684_FAILED,MODEM_MANAGER_UNAVAILABLE,SSID_NOT_FOUND,SECONDARY_CONNECTION_FAILED,DCB_FCOE_FAILED,TEAMD_CONTROL_FAILED,MODEM_FAILED,MODEM_AVAILABLE,SIM_PIN_INCORRECT,NEW_ACTIVATION,PARENT_CHANGED,PARENT_MANAGED_CHANGED = range(63)


def scale(val):
    units=['Y','Z','E','P','T','G','M','K','']
    label = units.pop()
    while val > 2**10:
        val /= 2**10
        label = units.pop()
    return val,label

def clicked():
    # find device to use
    sysbus = pydbus.SystemBus()
    nm = sysbus.get(".NetworkManager")

    activedev = None
    for device in nm.Devices:
        device = sysbus.get(".NetworkManager",device)
        if not device.Real or DeviceState(device.State) != DeviceState.ACTIVATED or device.Interface == "lo":
            continue
        if DeviceType(device.DeviceType) in [DeviceType.ETHERNET,DeviceType.WIFI]:
            activedev = device

    if not activedev:
        return

    activedev.RefreshRateMs = 1800

    start = time.time()
    last = start
    prevRx, prevTx = activedev.RxBytes,activedev.TxBytes
    while True:
        now = time.time()
        if now-start > 60:
            break

        rxb,txb = activedev.RxBytes, activedev.TxBytes
        time_delta = now-last

        drx, dtx = (rxb-prevRx)/time_delta,(txb-prevTx)/time_delta

        rx_scaled,rx_label = scale(drx)
        tx_scaled,tx_label = scale(dtx)

        print("{icon} %{{F#CB83BB}}{rx:6.2f} {rxL}B/s %{{F#83C4CB}}{tx:6.2f} {txL}B/s{nocolor}".format(
                icon=ICON,
                rx=rx_scaled, rxL = rx_label,
                tx=tx_scaled, txL = tx_label,
                nocolor=os.getenv("C_RST","")
            ))
        sys.stdout.flush()

        prevRx, prevTx = rxb, txb
        time.sleep(2)

        last=now

    activedev.RefreshRateMs = 0

def handle(signum, stack):
    if signum == signal.SIGUSR1:
        clicked()

def main():
    signal.signal(signal.SIGUSR1,handle)

    while True:
        print("%%{A:kill -SIGUSR1 %d:}%s%%{A}"%(os.getpid(),ICON))
        sys.stdout.flush()
        signal.pause()

if __name__ == "__main__":
    main()
