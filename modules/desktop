#!/usr/bin/env python
import subprocess
import sys
import os
import json
import re


def icon(font,codepoint):
	return "%s%s%s" % (os.environ[font],codepoint,os.environ['F_RESET'])

def count_clients(node):
	if node is None:
		return 0
	return count_clients(node['firstChild']) + count_clients(node['secondChild']) + ( 1 if node['client'] is not None else 0 )


def count_floaters(node):
	if node is None:
		return 0
	return count_floaters(node['firstChild']) + count_floaters(node['secondChild']) + ( 1 if node['client'] and node['client']['state'] == 'floating' else 0 )

def count_horiz(node):
	if node is None or node['client']:
		return 0
	return count_horiz(node['firstChild']) + count_horiz(node['secondChild']) + ( 1 if node['splitType'] == 'horizontal' else 0 )

def get_state():
	wm = subprocess.run(["bspc","wm","-d"],stdout=subprocess.PIPE)
	output = wm.stdout.decode('utf-8')
	j = json.loads(output)
	del j['focusHistory']
	return j


def parse_desktop(d,focused_d,focused_m):
	s = "%%{A:bspc desktop -f "+str(d['id'])+":}%%{A3:bspc desktop "+str(d['id'])+" -r:}%s%s%s%%{A}%%{A}"
	if focused_d:
		s = "%"+os.environ["C_RST"] + s + "%"+os.environ["C_TITLE"]
		if focused_m:
			s = "%%{+u}" + s + "%%{-u}"


	#empty desktop
	if d['root'] is None:
		return s % (os.environ["F_SIJI"],"\ue0e7",os.environ["F_RESET"])

	#single node
	if d['root']['client'] is not None:
		node = subprocess.run(["bspc","query","-N","-d",str(d['id'])],stdout=subprocess.PIPE).stdout.decode('utf-8').strip()
		xprop = subprocess.run(["xprop","-id",node],stdout=subprocess.PIPE).stdout.decode('utf-8')

		try:
			window = re.findall("^WM_CLASS.*=\s*\"([^\"]*)\"",xprop,re.MULTILINE)[0]
		except IndexError:
			window = ""
		try:
			title = re.findall("^WM_NAME.*=\s*\"([^\"]*)\"",xprop,re.MULTILINE)[0]
		except IndexError:
			title = ""

		if window:
			window = window.lower()
		if title:
			title = title.lower()

		if window == "google-chrome":
			if "reddit" in title:
				return s % (os.environ["F_SIJI"],"\ue1e9",os.environ["F_RESET"])
			elif "at master" in title:
				return s % (os.environ["F_SIJI"],"\ue1d3",os.environ["F_RESET"])
			elif "youtube" in title:
				return s % (os.environ["F_SIJI"],"\ue1eb",os.environ["F_RESET"])
			elif "inbox" in title or "mail" in title:
				return s % (os.environ["F_SIJI"],"\ue229",os.environ["F_RESET"])
			else:
				return s % (os.environ["F_SIJI"],"\ue1a0",os.environ["F_RESET"])
		elif window == "terminator":
			return s % (os.environ["F_SIJI"],"\ue1ef",os.environ["F_RESET"])
		elif window == "blender":
			return s % (os.environ["F_SIJI"],"\ue1c0",os.environ["F_RESET"])
		elif window == "thunar":
			return s % (os.environ["F_SIJI"],"\ue1e1",os.environ["F_RESET"])
		elif window == "darktable":
			return s % (os.environ["F_SIJI"],"\ue1e7",os.environ["F_RESET"])
		elif window == "viewnior" or window == "sxiv":
			return s % (os.environ["F_SIJI"],"\ue1da",os.environ["F_RESET"])
		elif window == "evince":
			return s % (os.environ["F_SIJI"],"\ue1ed",os.environ["F_RESET"])
		elif window == "vlc" or window == "gl": #mplayer
			return s % (os.environ["F_SIJI"],"\ue1dd",os.environ["F_RESET"])

		#did not find any app-specific icons, go with generic
		if d['root']['client']['state'] == 'floating':
			return s % (os.environ["F_SIJI"],"\ue001",os.environ["F_RESET"])
		else:
			return s % (os.environ["F_SIJI"],"\ue000",os.environ["F_RESET"])

	n_clients = count_clients(d['root'])
	n_floaters = count_floaters(d['root'])
	n_horizontal = count_horiz(d['root'])

	if n_clients == n_floaters:
		return s % (os.environ["F_SIJI"],"\ue0b1",os.environ["F_RESET"])

	if n_clients == 2:
		if n_floaters == 1:
			return s % (os.environ["F_SIJI"],"\ue006",os.environ["F_RESET"])
		if n_floaters == 0:
			if d['root']['splitType'] == 'vertical':
				return s % (os.environ["F_SIJI"],"\ue26b",os.environ["F_RESET"])
			else:
				return s % (os.environ["F_SIJI"],"\ue004",os.environ["F_RESET"])

	if n_clients == 3 and n_floaters == 0:
		if d['root']['splitType'] == 'vertical':
			if d['root']['firstChild']['client']:
				return s % (os.environ["F_UUSHI"],"\u2b98",os.environ["F_RESET"])
			else:
				return s % (os.environ["F_UUSHI"],"\u2b99",os.environ["F_RESET"])
		elif d['root']['firstChild']['client'] and d['root']['secondChild']['splitType'] == 'vertical':
			return s % (os.environ["F_UUSHI"],"\u2b9a",os.environ["F_RESET"])

	# everything below is 3+ clients, with at least some tiled
	if d['root']['splitType'] == 'horizontal':
		if d['root']['firstChild']['client']:
			if d['root']['secondChild']['splitType'] == 'vertical':
				return s % (os.environ["F_SIJI"],"\ue003",os.environ["F_RESET"])
			else:
				return s % (os.environ["F_SIJI"],"\ue004",os.environ["F_RESET"])
		else:
			return s % (os.environ["F_SIJI"],"\ue00a",os.environ["F_RESET"])

	#if n_horizontal == 0:
	#	return s % (os.environ["F_SIJI"],"\ue1de",os.environ["F_RESET"])

	if d['root']['splitType'] == 'vertical':
		if d['root']['firstChild']['client']:
			if count_horiz(d['root']['secondChild']) == count_clients(d['root']['secondChild'])-1:
				return s % (os.environ["F_SIJI"],"\ue002",os.environ["F_RESET"])
			else:
				return s % (os.environ["F_SIJI"],"\ue007",os.environ["F_RESET"])
		else:
			return s % (os.environ["F_SIJI"],"\ue009",os.environ["F_RESET"])

	# grid for all other confounding cases
	return s % (os.environ["F_SIJI"],"\ue005",os.environ["F_RESET"])






def print_state(state):
	desk_list = []
	for i,m in enumerate(state['monitors']):
		desk_list.append(["%%{A2:bspc monitor %d -a %s:}" % (m['id'],"IV")])
		for d in m['desktops']:
			desk_list[i].append(parse_desktop(d,d['id']==m['focusedDesktopId'],m['id']==state['focusedMonitorId']))
		desk_list[i].append("%{A}")
	
	print(os.environ["C_TITLE"] + "|".join(["".join(desk) for desk in desk_list]))
	sys.stdout.flush()

def main():
	print_state(get_state())
	with subprocess.Popen(["bspc","subscribe","monitor_add","monitor_remove","monitor_swap","desktop_add","desktop_remove","desktop_swap","desktop_transfer","desktop_focus","desktop_layout","node_manage","node_unmanage","node_swap","node_transfer","node_geometry","node_state","node_state","node_layer"],bufsize=1,stdout=subprocess.PIPE,encoding="utf-8") as child:
		while child.poll() is None:
			child.stdout.readline()
			print_state(get_state())



if __name__ == "__main__":
	main()

