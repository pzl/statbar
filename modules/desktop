#!/usr/bin/env python
import subprocess
import sys
import os
import json
import re

e = os.environ

def icon(font,codepoint):
	return "%s%s%s" % (os.environ[font],codepoint,os.environ['F_RESET'])

def count_clients(node):
	if node is None:
		return 0
	return count_clients(node['firstChild']) + count_clients(node['secondChild']) + ( 1 if node['client'] is not None else 0 )


def count_floaters(node):
	if node is None:
		return 0
	return count_floaters(node['firstChild']) + count_floaters(node['secondChild']) + ( 1 if node['client'] and node['client']['state'] == 'floating' else 0 )

def get_state():
	wm = subprocess.run(["bspc","wm","-d"],stdout=subprocess.PIPE)
	output = wm.stdout.decode('utf-8')
	j = json.loads(output)
	del j['focusHistory']
	return j


def borders(node):
	return "" if node['client'] else node['splitType'][0]+ borders(node['firstChild']) + borders(node['secondChild'])


def single_app_icon(desktop):
	node = subprocess.run(["bspc","query","-N","-d",str(desktop['id'])],stdout=subprocess.PIPE).stdout.decode('utf-8').strip()
	xprop = subprocess.run(["xprop","-id",node],stdout=subprocess.PIPE).stdout.decode('utf-8')

	try:
		window = re.findall("^WM_CLASS.*=\s*\"([^\"]*)\"",xprop,re.MULTILINE)[0]
	except IndexError:
		window = ""
	try:
		title = re.findall("^WM_NAME.*=\s*\"([^\"]*)\"",xprop,re.MULTILINE)[0]
	except IndexError:
		title = ""

	if window:
		window = window.lower()
	if title:
		title = title.lower()

	if window == "google-chrome":
		if "reddit" in title: return e["FA_REDDIT_ALIEN"]
		elif "at master" in title or "github" in title: return e["FA_GITHUB_ALT"]
		elif "youtube" in title: return e["FA_YOUTUBE_PLAY"]
		elif re.search(r'\(\d+\)',title) and ('mail' in title or 'inbox' in title): return e["C_CAUTION"]+e["MD_MAIL"]+e["C_TITLE"]
		elif "inbox" in title or "mail" in title: return e["MD_EMAIL"]
		elif re.match(r'\(\d+\).*facebook',title,re.I): return e["C_CAUTION"]+e["FA_FACEBOOK_SQUARE"]+e["C_TITLE"]
		elif "facebook" in title: return e["FA_FACEBOOK_SQUARE"]
		elif "stack overflow" in title: return e["FA_STACK_OVERFLOW"]
		elif "instagram" in title: return e["FA_INSTAGRAM"]
		elif "bitbucket" in title: return e["FA_BITBUCKET"]
		elif "*" in title and "slack" in title: return e["C_CAUTION"]+e["FA_SLACK"]+e["C_TITLE"]
		elif "!" in title and "slack" in title: return e["C_WARN"]+e["FA_SLACK"]+e["C_TITLE"]
		elif "slack" in title: return e["FA_SLACK"]
		elif "google search" in title: return e["FA_GOOGLE"]
		elif "codepen" in title: return e["FA_CODEPEN"]
		elif "jsfiddle" in title: return e["FA_JSFIDDLE"]
		elif "wikipedia" in title: return e["FA_WIKIPEDIA_W"]
		elif "amazon web services" in title or "aws" in title or "management console" in title: return e["MFIZZ_AWS"]
		elif "amazon" in title:	return e["FA_AMAZON"]
		elif "jira" in title: return e["DEV_JIRA"]
		else: return e["FA_CHROME"]
	elif window == "firefox": return e["FA_FIREFOX"]
	elif window == "terminator": return e["MFIZZ_SHELL"]
	elif window == "blender": return e["FILE_BLENDER"]
	elif window == "thunar": return e["FA_FOLDER_OPEN"]
	elif window == "darktable": return e["MD_CAMERA"]
	elif window == "viewnior" or window == "sxiv": return e["FA_IMAGE"]
	elif window == "evince": return e["OCT_FILE_PDF"]
	elif window == "openscad": return e["FILE_SCAD"]
	elif window == "audacity": return e["FILE_AUDACITY"]
	elif window == "kicad": return e["FILE_KICAD"]
	elif window == "fontforge": return e["FILE_FF"]
	elif window == "gvim": return e["DEV_VIM"]
	elif window == "steam": return e["FA_STEAM"]
	elif window == "pronterface.py": return e["MFIZZ_3DPRINT"]
	elif window == "subl3": return e["FILE_SUBLIME"]
	elif window == "substance-designer": return e["STAT_SUB_DESIGNER"]
	elif window == "substance-painter": return e["STAT_SUB_PAINTER"]
	elif "slic3r" in window: return e["STAT_SLIC3R"]
	elif window == "vlc" or window == "gl": return e["MD_LOCAL_MOVIES"] # FA_FILM
	elif window == "inkscape": return e["STAT_INKSCAPE"]

	#did not find any app-specific icons, go with generic
	if desktop['root']['client']['state'] == 'floating':
		return e["STAT_LAYOUT_SINGLE_FLOAT"]
	else:
		return e["STAT_LAYOUT_FULL"]


def make_desktop_icon(d):
	desktop = d['root']

	#empty desktop
	if desktop is None:
		return e["STAT_LAYOUT_EMPTY"]

	#single node
	if desktop['client'] is not None:
		return single_app_icon(d)

	n_clients = count_clients(desktop)
	n_floaters = count_floaters(desktop)
	border = borders(desktop)


	if n_clients == n_floaters:
		return e["MD_FILTER_"+str(n_floaters) if n_floaters < 10 else "9_PLUS"]

	if n_clients == 2:
		if n_floaters == 1:
			return e["STAT_LAYOUT_FLOATS"]
		else:
			return e["STAT_LAYOUT_2_"+desktop['splitType'][0].upper()]

	if n_floaters > 0:
		return e["STAT_LAYOUT_FLOATS"]

	#all uniform directions, LAYOUT_3_VV, LAYOUT_3_HH, LAYOUT_4_VVV, LAYOUT_4_HHH
	if set(border) == {'v'} or set(border) == {'h'}:
		return e["STAT_LAYOUT_%d_%s" % (min(len(border)+1,4),border.upper()) ]

	if n_clients == 3:
		if desktop['splitType'] == 'vertical':
			return e["STAT_LAYOUT_3_V_H"] if desktop['firstChild']['client'] else e["STAT_LAYOUT_3_HV_"]
		else:
			return e["STAT_LAYOUT_3_H_V"] if desktop['firstChild']['client'] else e["STAT_LAYOUT_3_VH_"]

	# everything below is 4+ windows, no floaters
	# just assume 4 and figure 5 might be inaccurate or crazy

	# look for even grid
	if ( (not desktop['firstChild']['client']) and desktop['firstChild']['splitType'] != desktop['splitType']  and
	     (not desktop['secondChild']['client']) and desktop['secondChild']['splitType'] != desktop['splitType'] ):
		return e["STAT_LAYOUT_4_GRID"]


	# look for piano

	"""
	if desktop['splitType'] == 'horizontal':
		if desktop['firstChild']['client']:
			if desktop['secondChild']['splitType'] == 'vertical':
				return e["F_SIJI"]+"\ue003"+e["F_RESET"]
			else:
				return e["F_SIJI"]+"\ue004"+e["F_RESET"]
		else:
			return e["F_SIJI"]+"\ue00a"+e["F_RESET"]


	if desktop['splitType'] == 'vertical':
		if desktop['firstChild']['client']:
			if count_horiz(desktop['secondChild']) == count_clients(desktop['secondChild'])-1:
				return e["F_SIJI"]+"\ue002"+e["F_RESET"]
			else:
				return e["F_SIJI"]+"\ue007"+e["F_RESET"]
		else:
			return e["F_SIJI"]+"\ue009"+e["F_RESET"]

	# grid for all other confounding cases
	return e["F_SIJI"]+"\ue005"+e["F_RESET"]
	"""
	return e["POM_AWAY"]


def parse_desktop(d,focused_d,focused_m):
	s = "%%{A:bspc desktop -f "+str(d['id'])+":}%%{A3:bspc desktop "+str(d['id'])+" -r:}%s%%{A}%%{A}"
	if focused_d:
		s = "%"+e["C_RST"] + s + "%"+e["C_TITLE"]
		if focused_m:
			s = "%%{+u}" + s + "%%{-u}"

	return s % (make_desktop_icon(d),)





def print_state(state):
	desk_list = []
	for i,m in enumerate(state['monitors']):
		desk_list.append(["%%{A2:bspc monitor %d -a %s:}" % (m['id'],"IV")])
		for d in m['desktops']:
			desk_list[i].append(parse_desktop(d,d['id']==m['focusedDesktopId'],m['id']==state['focusedMonitorId']))
		desk_list[i].append("%{A}")
	
	print(os.environ["C_TITLE"] + "|".join(["".join(desk) for desk in desk_list]))
	sys.stdout.flush()

def main():
	print_state(get_state())
	with subprocess.Popen(["bspc","subscribe","monitor_add","monitor_remove","monitor_swap","desktop_add","desktop_remove","desktop_swap","desktop_transfer","desktop_focus","desktop_layout","node_add","node_remove","node_swap","node_transfer","node_geometry","node_state","node_state","node_layer"],bufsize=1,stdout=subprocess.PIPE,encoding="utf-8") as child:
		while child.poll() is None:
			child.stdout.readline()
			print_state(get_state())



if __name__ == "__main__":
	while True:
		try:
			main()
		except Exception as e:
			import datetime
			import traceback
			f = open(os.path.expanduser("~/tmp/desktop-err.txt"),"a")
			f.write("Exception at %s\n" % (datetime.datetime.now().strftime("%c"),))
			traceback.print_exception(*sys.exc_info(),file=f)
			f.close()

